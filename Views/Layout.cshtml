@using Orchard.Core.Shapes

@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    Display.Insertions();

    // Zone as an alias for Display to help make it obvious when we're displaying zones
    Func<dynamic, dynamic> Zone = x => Display(x);

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Last bit of code to prep the layout wrapper
    Model.Id = "layout-wrapper";
    // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var tag = Tag(Model, "div");
}

<a id="skip" href="#content" class="sr-only sr-only-focusable">Skip to main content</a>
<a id="top" class="invisible"></a>

@tag.StartElement

@if (Model.Header != null) {
<header id="layout-header">
    @Zone(Model.Header)
</header>
}

@{ 
    var hasNavbarItems = Model.Navigation != null && Model.Navigation.Items != null && Model.Navigation.Items.Count > 0;
    var navbarItems = hasNavbarItems ? Model.Navigation.Items : Enumerable.Empty<dynamic>();
}

<div id="layout-navigation">
    <nav class="zone zone-navigation navbar navbar-default">
        <div class="container">
            @Display.NavbarHeader(ShowHamburger: hasNavbarItems, DataTarget: "#navbar-collapse")
            @if (hasNavbarItems) {
            <div class="collapse navbar-collapse" id="navbar-collapse">
                @foreach (var item in CoreShapes.Order(navbarItems)) {
                    @Display(item)
                }
            </div>
            }
        </div>
    </nav>
</div>

@if (Model.ContextNav != null) {
<div id="layout-contextnav">
    @Zone(Model.ContextNav)
</div>
}

@if (Model.Featured != null) {
<div id="layout-featured">
    @Zone(Model.Featured)
</div>
}

<div id="layout-main-container" class="container">
    <div id="layout-main">
        @if (Model.AsideFirst != null) {
        <aside id="aside-first" class="aside-first">
            @Zone(Model.AsideFirst)
        </aside>
        }
        <div id="layout-content">
            @* See http://getbootstrap.com/getting-started/#skip-navigation *@
            <div id="content" tabindex="-1">
                @* the *local* content zone is in here *@
                @Zone(Model.Content)
            </div>
        </div>
        @if (Model.AsideSecond != null) {
        <aside id="aside-second" class="aside-second">
            @Zone(Model.AsideSecond)
        </aside>
        }
    </div>
</div>

@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null) {
<div id="layout-tripel-container" class="container">
    <div id="layout-tripel">
        @* as in beer *@
        @if (Model.TripelFirst != null) {
            <div id="tripel-first">
                @Zone(Model.TripelFirst)
            </div>
        }
        @if (Model.TripelSecond != null) {
            <div id="tripel-second">
                @Zone(Model.TripelSecond)
            </div>
        }
        @if (Model.TripelThird != null) {
            <div id="tripel-third">
                @Zone(Model.TripelThird)
            </div>
        }
    </div>
</div>
}

<div class="container back-to-top">
    <div class="row">
        <div class="col-md-12">
            <a href="#top" class="btn btn-default">Back to top</a>
        </div>
    </div>
</div>

@if (Model.FooterNav != null) {
<div id="layout-footernav">
    <div id="footernav" class="container">
        @Zone(Model.FooterNav)
    </div>
</div>
}

@if (Model.Footer != null) {
<footer id="layout-footer">
    <div id="footer" class="container">
        @Zone(Model.Footer)
    </div>
</footer>
}
@tag.EndElement
