@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    Display.Insertions();

    // Zone as an alias for Display to help make it obvious when we're displaying zones
    Func<dynamic, dynamic> Zone = x => Display(x);

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Last bit of code to prep the layout wrapper
    Model.Id = "layout-wrapper";
    // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var tag = Tag(Model, "div");
}
@tag.StartElement
@if (Model.Header != null) {
<header id="layout-header" class="group">
    <div id="header">
        @Zone(Model.Header)
    </div>
</header>
}
@if (Model.Navigation != null) {
<div id="layout-navigation" class="group">
    @Zone(Model.Navigation)
</div>
}
@if (Model.Featured != null) {
<div id="layout-featured" class="group">
    @Zone(Model.Featured)
</div>
}
<div id="layout-main-container">
    <div id="layout-main" class="group">
    @if (Model.AsideFirst != null) {
        <aside id="aside-first" class="aside-first group">
            @Zone(Model.AsideFirst)
        </aside>
    }
        <div id="layout-content" class="group">
            @if (Model.Content != null) {
            <div id="content" class="group">
                @Zone(Model.Content)
            </div>
            }
        </div>
    @if (Model.AsideSecond != null) {
        <aside id="aside-second" class="aside-second">
            @Zone(Model.AsideSecond)
        </aside>
    }
    </div>
</div>

<div id="layout-footer" class="group">
    <footer id="footer">
        @if(Model.Footer != null) {
        <div id="footer-sig" class="group">
            @Zone(Model.Footer)
        </div>
        }
    </footer>
</div>
@tag.EndElement
