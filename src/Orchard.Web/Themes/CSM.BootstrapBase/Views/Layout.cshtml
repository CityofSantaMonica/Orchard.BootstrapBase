@using Orchard.Core.Shapes

@{
    Display.Insertions();

    // Zone as an alias for Display to help make it obvious when we're displaying zones
    Func<dynamic, dynamic> Zone = x => Display(x);

    bool hasAlertItems = LayoutHelpers.HasItems(Model.AlertBar);
    bool hasNavbarItems = LayoutHelpers.HasItems(Model.Navigation);
    bool hasContextNavItems = LayoutHelpers.HasItems(Model.ContextNav);

    var navbarItems = CoreShapes.Order(hasNavbarItems ? Model.Navigation.Items : Enumerable.Empty<dynamic>());
    var contextNavItems = CoreShapes.Order(hasContextNavItems ? Model.ContextNav.Items : Enumerable.Empty<dynamic>());

    if (hasAlertItems) {
        Model.Classes.Add("with-alertbar");
    }
    if (hasContextNavItems) {
        Model.Classes.Add("with-contextnav");
    }

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = LayoutHelpers.CalcuClassify(Model, new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (LayoutHelpers.HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = LayoutHelpers.CalcuClassify(Model, new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (LayoutHelpers.HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Last bit of code to prep the layout wrapper
    Model.Id = "layout-wrapper";
    // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var tag = Tag(Model, "div");
}

<a id="skip" href="#content" class="sr-only sr-only-focusable">Skip to main content</a>
<a id="top" class="invisible"></a>

@tag.StartElement
<div id="layout-navigation-wrapper">
    @if (hasAlertItems) {
    <div id="layout-alertbar">
        <div class="container">
            @Zone(Model.AlertBar)
        </div>
    </div>
    }
    <div id="layout-navigation">
        <nav class="zone zone-navigation navbar navbar-default">
            <div class="container">
                @{ var navbartarget = "navbar-collapse"; }
                @Display.NavbarHeader(ShowHamburger: hasNavbarItems, DataTarget: "#" + navbartarget)
                @if (hasNavbarItems){
                    @Display.NavbarCollapse(DataTarget: navbartarget, Items: navbarItems)
                }
            </div>
        </nav>
    </div>
    @if (hasContextNavItems) {
    <div id="layout-contextnav">
        <nav class="zone zone-contextnav navbar navbar-secondary">
            <div class="container">
                @Display.ContextNavLabel()
                @{ var contextnavtarget = "contextnav-collapse"; }
                @Display.NavbarHeader(ShowHamburger: true, ShowBrand: false, DataTarget: "#" + contextnavtarget)
                @Display.NavbarCollapse(DataTarget: contextnavtarget, Items: contextNavItems)
            </div>
        </nav>
    </div>
    }
</div>
<div id="layout-body-wrapper">
    @if (Model.Featured != null) {
    <div id="layout-featured">
        @Zone(Model.Featured)
    </div>
    }
    <div id="layout-content-container">
        <div id="layout-content">
            @if (Model.Messages != null) {
            <div id="messages">
                @Zone(Model.Messages)
            </div>
            }
            @if (Model.AsideFirst != null) {
            <aside id="aside-first" class="aside-first">
                @Zone(Model.AsideFirst)
            </aside>
            }
            @* See http://getbootstrap.com/getting-started/#skip-navigation *@
            <main id="content" tabindex="-1">
                @* the *local* content zone is in here *@
                @Zone(Model.Content)
            </main>
            @if (Model.AsideSecond != null) {
            <aside id="aside-second" class="aside-second">
                @Zone(Model.AsideSecond)
            </aside>
            }
        </div>
    </div>
    @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null) {
    <div id="layout-tripel-container">
        <div id="layout-tripel">
            @* as in beer *@
            @if (Model.TripelFirst != null) {
            <div id="tripel-first">
                @Zone(Model.TripelFirst)
            </div>
            }
            @if (Model.TripelSecond != null) {
            <div id="tripel-second">
                @Zone(Model.TripelSecond)
            </div>
            }
            @if (Model.TripelThird != null) {
            <div id="tripel-third">
                @Zone(Model.TripelThird)
            </div>
            }
        </div>
    </div>
    }
    <div class="container back-to-top">
        <div class="row">
            <div class="col-md-12">
                <a href="#top" class="btn btn-default">Back to top</a>
            </div>
        </div>
    </div>
</div>
<div id="layout-footer-wrapper">
    @if (Model.FooterNav != null) {
    <div id="layout-footernav">
        <div id="footernav" class="container">
            @Zone(Model.FooterNav)
        </div>
    </div>
    }
    @if (Model.Footer != null) {
    <footer id="layout-footer">
        <div class="container">
            @Zone(Model.Footer)
        </div>
    </footer>
    }
</div>

@tag.EndElement
